package com.example.filip.gpsrecorder;

import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.Looper;
import android.util.Log;
import android.widget.Toast;

import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Date;

/*****************************************************************************************************
 *	SOURCE FILE:	LocationUpdateService.java	Location update service to receive location updates
 *                                              in the back ground and send to the server the client's
 *                                              location data.
 *
 *	PROGRAM:	GPS Recorder
 *
 *	FUNCTIONS:
 *		protected void onCreate(Bundle)
 *	    public int onStartCommand(Intent intent, int flags, int startId)
 *	    public void onDestroy()
 *		private void getDeviceIdentity()
 *      private void startLocationDiscovery()
 *      private String buildPacket(Location l)
 *
 *  Inner Classes:
 *      private class RequestConnection extends AsyncTask
 *      private class WriteSocket extends AsyncTask
 *      private final class ServiceHandler extends Handler
 *
 *	DATE: 		March 13, 2015
 *
 *
 *	DESIGNERS: 	Filip Gutica
 *
 *	PROGRAMMER: Filip Gutica
 *
 *	NOTES:
 *
 ******************************************************************************************************/
public class LocationUpdateService extends Service {

    public static boolean isRunning = false;

    private Looper mServiceLooper;
    private LocationManager locationManager;
    private LocationListener locationListener;

    private SharedPreferences sharedpreferences;
    private Socket clientSocket;

    private WifiManager wifiManager;
    private WifiInfo wifiInfo;

    private String deviceIP = null;

    private String macAddress = null;

    @Override
    /*************************************************************************************
     * Function: onCreate
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Autogenerated function
     *
     * PROGRAMMER:	Autogenerated function
     *              implemented by Filip Gutica
     *
     * INTERFACE:	onCreate(Bundle savedInstanceState)
     *
     * PARAMETERS:
     *          savedInstanceState      -   Any previouse save state of the application.
     *                                      if application is restarted, allows for it to
     *                                      continue from where the user left off.
     *
     * RETURNS:	void
     *
     * NOTES:
     * Main entry point of the service. The first function that is called when this service
     * is started.
     *************************************************************************************/
    public void onCreate() {

        // Start up the thread running the service.  Note that we create a
        // separate thread because the service normally runs in the process's
        // main thread, which we don't want to block.  We also make it
        // background priority so CPU-intensive work will not disrupt our UI.
        HandlerThread thread = new HandlerThread("ServiceStartArguments",
                android.os.Process.THREAD_PRIORITY_BACKGROUND);

        thread.setDaemon(true);
        thread.start();

        // Get the HandlerThread's Looper and use it for our Handler
        mServiceLooper = thread.getLooper();
      //  mServiceHandler = new ServiceHandler(mServiceLooper);

    }

    @Override
    /*************************************************************************************
     * Function: onStartCommand(Intent, int, int)
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Autogenerated function
     *
     * PROGRAMMER:	Autogenerated function
     *              implemented by Filip Gutica
     *
     * INTERFACE:	onStartCommand(Intent, int, int)
     *
     * PARAMETERS:
     *          intent      - Received intent, supplied to the StartService function
     *          flags       - service flags. Additional data about the start request
     *          startId     - Unique integer ID representing the start request
     *
     * RETURNS:	void
     *
     * NOTES:
     * Called by the system every time a client explicitly calls the service by calling
     * Android.Content.Context.StartService(Android.Content.Intent)
     *
     * Instantiates our shared preferences object. Gets and sets the device MAC and IP
     * address. Request a connection to the server. Starts the location discovery.
     *************************************************************************************/
    public int onStartCommand(Intent intent, int flags, int startId) {

        Toast.makeText(this, "GPS Service started", Toast.LENGTH_SHORT).show();
        isRunning = true;

        sharedpreferences = getSharedPreferences("my_preferences", Context.MODE_PRIVATE);

        new RequestConnection().execute();

        getDeviceIdentity();

        startLocationDiscovery();


        // If we get killed, after returning from here, restart
        return START_STICKY;
    }




    @Override
    /**
     * Auto generated
     */
    public IBinder onBind(Intent intent) {
        return null;
    }

    @Override
    /*************************************************************************************
     * Function: onDestroy
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Autogenerated function
     *
     * PROGRAMMER:	Autogenerated function
     *              implemented by Filip Gutica
     *
     * INTERFACE:	onDestroy()
     *
     * PARAMETERS:
     *          void
     *
     * RETURNS:	void
     *
     * NOTES:
     * Called when the service is stopped
     *************************************************************************************/
    public void onDestroy() {

        Toast.makeText(this, "Broadcasting stopped", Toast.LENGTH_SHORT).show();
        isRunning = false;
        mServiceLooper.quit();
        locationManager.removeUpdates(locationListener);
        try {
            if (clientSocket != null)
                clientSocket.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        super.onDestroy();
    }

    /*************************************************************************************
     * Function: getDeviceIdentity()
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Filip Gutica
     *
     * PROGRAMMER:	Filip Gutica
     *
     * INTERFACE:	getDeviceIdentity()
     *
     * PARAMETERS:
     *          void
     *
     * RETURNS:	void
     *
     * NOTES:
     * gets and sets the ip and MAC addresses of the device to be sent along with location
     * info to the server.
     *************************************************************************************/
    private void getDeviceIdentity() {

        wifiManager = (WifiManager) getSystemService(WIFI_SERVICE);
        wifiInfo = wifiManager.getConnectionInfo();

        int ipAddress = wifiInfo.getIpAddress();

        deviceIP = android.text.format.Formatter.formatIpAddress(ipAddress);

        macAddress = wifiInfo.getMacAddress();

        Log.d("DEVICE MAC ADDRESSS", macAddress);
        Log.d("DEVICE IP ADDRESS: ", deviceIP);
    }

    /*************************************************************************************
     * Function: startLocationDiscovery
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Filip Gutica
     *
     * PROGRAMMER:	Filip Gutica
     *
     * INTERFACE:	void startLocationDiscovery()
     *
     * PARAMETERS:
     *          void
     *
     * RETURNS:	void
     *
     * NOTES:
     * Posts a beginLocationUpdates request to the location manager. Catches the location
     * updates inside of the location listener. Sets the min time and min distance between
     * updates based on the client's preferences.
     *************************************************************************************/
    private void startLocationDiscovery() {

        int minTimeUpdate;
        int minDistUpdate;

        locationManager = (LocationManager) this.getSystemService(Context.LOCATION_SERVICE);

        String useProvider;
        if (locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {

            useProvider = LocationManager.NETWORK_PROVIDER;
        }
        else if (!locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER) &&
                 locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {

            useProvider = LocationManager.GPS_PROVIDER;
        }
        else {

            useProvider = LocationManager.PASSIVE_PROVIDER;
        }

        // Define a listener that responds to location updates
        locationListener = new LocationListener() {
            public void onLocationChanged(Location location) {
                // Called when a new location is found by the network location provider.
                Log.d("", "" + location.toString());

                String packet = buildPacket(location);

                new WriteSocket().execute(packet);

            }

            public void onStatusChanged(String provider, int status, Bundle extras) {}

            public void onProviderEnabled(String provider) {}

            public void onProviderDisabled(String provider) {}
        };

        Log.d("USING PROVIDER", useProvider);
        minTimeUpdate = sharedpreferences.getInt("MIN_TIME", 1000);
        minDistUpdate = sharedpreferences.getInt("MIN_DISTANCE", 5);
        Log.d("MIN TIME", ""+minTimeUpdate);
        Log.d("MIN DISTANCE", ""+minDistUpdate);
        // Register the listener with the Location Manager to receive location updates
        locationManager.requestLocationUpdates(useProvider, minTimeUpdate, minDistUpdate, locationListener);
    }

    /*************************************************************************************
     * Function: buildPacket
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Filip Gutica
     *
     * PROGRAMMER:	Filip Gutica
     *
     * INTERFACE:	buildPacket(Location l)
     *
     * PARAMETERS:
     *          l     - location object
     *
     * RETURNS:	String      - Comma delimited client location info
     *
     * NOTES:
     * builds a packet containing a longitude, latitude, ip address, date and macAddress
     * delimited by commas.
     *************************************************************************************/
    private String buildPacket(Location l) {

        if (l == null)
            return null;

        String s;

        Date d = new Date(l.getTime());
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");

        String sDate = sdf.format(d);

        s = l.getLongitude() + ", " + l.getLatitude() + ", " + deviceIP + ", " + sDate + ", " + macAddress;

        return s;
    }


    /*************************************************************************************
     * Inner class: RequestConnection
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Filip Gutica
     *
     * PROGRAMMER:	Filip Gutica
     *
     *
     * NOTES:
     * Asynchronous Task class to handle the connection request to the server.
     * Instantiates the client socket
     *************************************************************************************/
    private class RequestConnection extends AsyncTask<Object, Void, String> {

        @Override
        /*************************************************************************************
         * Function: doInBackground
         *
         * DATE: March 13, 2015
         *
         * DESIGNER:	Auto generated by android studio
         *              Filip Gutica
         *
         * PROGRAMMER:	Auto Generated by android studio
         *              Implemented by Filip Gutica to perform connection request on the client socket
         *
         * INTERFACE:	doInBackground(Object... params)
         *
         * PARAMETERS:
         *          params     - params passed to the async task
         *
         * RETURNS:	void
         *
         * NOTES:
         * builds a packet containing a longitude, latitude, ip address, date and macAddress
         * delimited by commas.
         *************************************************************************************/
        protected String doInBackground(Object... params) {

            String ip = sharedpreferences.getString("IP_ADDR", "lamckalex.ddns.net");
            int port = sharedpreferences.getInt("PORT", 7000);

            Log.d("server ip", ip);
            Log.d("server port", "" + port);

            try {
                clientSocket = new Socket(ip, port);

            } catch (IOException e1) {
                e1.printStackTrace();
            }
            return null;
        }
    }


    /*************************************************************************************
     * Inner class: WriteSocket
     *
     * DATE: March 13, 2015
     *
     * DESIGNER:	Filip Gutica
     *
     * PROGRAMMER:	Filip Gutica
     *
     *
     * NOTES:
     * Asynchronous Task class to writing on the client socket
     *************************************************************************************/
    private class WriteSocket extends AsyncTask<Object, Void, String> {


        @Override
        /*************************************************************************************
         * Function: doInBackground
         *
         * DATE: March 13, 2015
         *
         * DESIGNER:	Auto generated by android studio
         *              Filip Gutica
         *
         * PROGRAMMER:	Auto Generated by android studio
         *              Implemented by Filip Gutica to perform connection request on the client socket
         *
         * INTERFACE:	doInBackground(Object... params)
         *
         * PARAMETERS:
         *          params     - params passed to the async task
         *
         * RETURNS:	void
         *
         * NOTES:
         * Writes the supplied string in params to the client socket
         *************************************************************************************/
        protected String doInBackground(Object... params) {

            OutputStream os;

            String send = (String)params[0];

            try {

                if (clientSocket != null) {

                    clientSocket.setSendBufferSize(1024);
                    os = clientSocket.getOutputStream();

                    Log.d("Sending ", send);

                    os.write(send.getBytes());
                    os.flush();
                }


            } catch (IOException e1) {
                e1.printStackTrace();
            }

            return null;
        }

    }



}
